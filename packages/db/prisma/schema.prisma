generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Client {
    id             String    @id @default(uuid())
    firstName      String
    lastName       String
    email          String    @unique
    phone          String?   @unique
    birthDate      DateTime
    medicalHistory String?
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
    deletedAt      DateTime?
    trainerId      String

    // Relations
    progressRecords ProgressRecord[]
    workoutPlans    WorkoutPlan[]
}

model ProgressRecord {
    id                 String   @id @default(cuid())
    date               DateTime @default(now())
    weight             Float?
    bodyFat            Float?
    armCircumference   Float?
    chestCircumference Float?
    waistCircumference Float?
    hipCircumference   Float?
    clientId           String
    client             Client   @relation(fields: [clientId], references: [id])
    trainerId          String

    @@unique([date, clientId])
    @@index([clientId])
}

model WorkoutPlan {
    id              String            @id @default(cuid())
    startDate       DateTime
    endDate         DateTime
    clientId        String
    client          Client            @relation(fields: [clientId], references: [id])
    WorkoutExercise WorkoutExercise[]
    createdAt       DateTime          @default(now())
}

model Exercise {
    id               String            @id @default(cuid())
    name             String
    description      String?
    videoUrl         String?
    imageUrl         String?
    primaryMuscles   String
    secondaryMuscles String?
    instructions     String?
    category         String
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt
    WorkoutExercise  WorkoutExercise[]
    trainerId        String            @map("trainerId")
}

model WorkoutExercise {
    id            String      @id @default(cuid())
    exerciseId    String
    exercise      Exercise    @relation(fields: [exerciseId], references: [id])
    workoutPlanId String
    workoutPlan   WorkoutPlan @relation(fields: [workoutPlanId], references: [id])
    sets          Int
    reps          Int
    rest          Int
    order         Int
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    trainerId     String      @map("trainerId")
}
